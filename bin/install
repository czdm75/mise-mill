#!/usr/bin/env bash

installer() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "version" == "${install_type}" ]; then
    install_version $version $install_path
  else
    install_ref $version $install_path
  fi
}

install_ref() {
  local version=$1
  local install_path=$2

  local tmp_dir
  tmp_dir=$(mktemp -d -t mill_XXXXXXX)

  local repo_uri
  repo_uri=${MILL_GIT_REPO:-"https://github.com/com-lihaoyi/mill"}

  local stable_version
  stable_version=${MILL_STABLE_VERSION:-"0.2.7"}

  # running this in a subshell
  # we don't want to disturb current working dir
  (
      set -e

      mkdir -p $tmp_dir/stable
      install_version $stable_version $tmp_dir/stable

      git clone --depth 1 --branch $version $repo_uri $tmp_dir/checkout
      cd $tmp_dir/checkout

      $tmp_dir/stable/bin/mill -i release

      mkdir -p $install_path/bin
      (echo "#!/usr/bin/env sh" && cat out/release/dest/mill) > $install_path/bin/mill
      chmod +x $install_path/bin/mill

      rm -rf $tmp_dir

  ) || (rm -rf $install_path $tmp_dir; exit 1)
}

install_version() {
  local version=$1
  local install_path=$2

  local tmp_download_dir
  tmp_download_dir=$(mktemp -d -t mill_XXXXXXX)

  # running this in a subshell
  # we don't want to disturb current working dir
  (
    set -e

    local archive_file
    archive_file=$(downloaded_file_path $version $tmp_download_dir)
    local archive_url
    archive_url=$(download_url $version)
    download $archive_file $archive_url || fail "could not download mill archive"
    mkdir -p $install_path/bin
    (echo "#!/usr/bin/env sh" && cat $archive_file) > $install_path/bin/mill
    chmod +x $install_path/bin/mill

    rm -rf $tmp_download_dir

  ) || (rm -rf $install_path $tmp_download_dir; exit 1)

  echo $tmp_download_dir
}

fail() {
    echo "asdf-mill error:" $*
    exit 1
}

download() {
  local download_path=$1
  local download_url=$2
  curl -Lo $download_path -C - $download_url
}

downloaded_file_path() {
  local version=$1
  local tmp_download_dir=$2
  local pkg_name="mill-${version}"
  echo "$tmp_download_dir/$pkg_name"
}

set_artifact_suffix(){
  if [ "$(expr substr $(uname -s) 1 5 2>/dev/null)" = "Linux" ]; then
    if [ "$(uname -m)" = "aarch64" ]; then
      ARTIFACT_SUFFIX="-native-linux-aarch64"
    else
      ARTIFACT_SUFFIX="-native-linux-amd64"
    fi
  elif [ "$(uname)" = "Darwin" ]; then
    if [ "$(uname -m)" = "arm64" ]; then
      ARTIFACT_SUFFIX="-native-mac-aarch64"
    else
      ARTIFACT_SUFFIX="-native-mac-amd64"
    fi
  else
     echo "This native mill launcher supports only Linux and macOS." 1>&2
     exit 1
  fi
}

download_url() {
  local version=$1
  case $version in
    *-native )
      set_artifact_suffix
      MILL_VERSION=${version%-native}
    ;;
    * )
      MILL_VERSION=$version
  esac

  case $MILL_VERSION in
    0.0.* | 0.1.* | 0.2.* | 0.3.* | 0.4.* )
      DOWNLOAD_SUFFIX=""
      DOWNLOAD_FROM_MAVEN=0
      ;;
    0.5.* | 0.6.* | 0.7.* | 0.8.* | 0.9.* | 0.10.* | 0.11.0-M* )
      DOWNLOAD_SUFFIX="-assembly"
      DOWNLOAD_FROM_MAVEN=0
      ;;
    *)
      DOWNLOAD_SUFFIX="-assembly"
      DOWNLOAD_FROM_MAVEN=1
      ;;
  esac
  case $MILL_VERSION in
    0.12.0 | 0.12.1 | 0.12.2 | 0.12.3 | 0.12.4 | 0.12.5 | 0.12.6 | 0.12.7 | 0.12.8 | 0.12.9 | 0.12.10 | 0.12.11 )
      DOWNLOAD_EXT="jar"
      ;;
    0.12.* )
      DOWNLOAD_EXT="exe"
      ;;
    0.* )
      DOWNLOAD_EXT="jar"
      ;;
    *)
      DOWNLOAD_EXT="exe"
      ;;
  esac

  if [ "$DOWNLOAD_FROM_MAVEN" = "1" ] ; then
    echo "https://repo1.maven.org/maven2/com/lihaoyi/mill-dist${ARTIFACT_SUFFIX}/${MILL_VERSION}/mill-dist${ARTIFACT_SUFFIX}-${MILL_VERSION}.${DOWNLOAD_EXT}"
  else
    local MILL_VERSION_TAG=$(echo "$MILL_VERSION" | sed -E 's/([^-]+)(-M[0-9]+)?(-.*)?/\1\2/')
    echo "https://github.com/com-lihaoyi/mill/releases/download/${MILL_VERSION_TAG}/${MILL_VERSION}${DOWNLOAD_SUFFIX}"
  fi
}

installer $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
